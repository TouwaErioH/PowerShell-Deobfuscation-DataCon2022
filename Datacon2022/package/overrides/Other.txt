function Start-Sleep( ) {
    param(

  [Parameter( Mandatory = $False) ] [switch]$Seconds,
		
    

        [Parameter(
			Mandatory = $False,
			ValueFromPipeline=$True)]
        [ int]$time
    )
	
    
    $data = "Script attempted to sleep for " + $time + " seconds" + "`r`n"
    UpdateReport($data)
    
	 
return
}

function Start-Process( ) {
    param(
        [Parameter(
			Mandatory = $False,
			ValueFromPipeline=$True)]
        [ string]$Process
    )
	
	$data = "Script attempted to execute the process " +$Process + "`r`n"
    UpdateReport($data) 
     
     
     
     
return
}

function Stop-Process( ) {
    param(
                       
        [Parameter(
			Mandatory = $False,
			ValueFromPipeline=$True)]
        [ string]$Process
    )
	
	$data = "Script attempted to kill the process " +$Process + "`r`n"
    UpdateReport($data)  
    
return
}

function Invoke-Item( ) {
    param(
        [Parameter(
			Mandatory = $False,
			ValueFromPipeline=$True)]
        [ string] $Item
    )
	
	 
    $data = "Script attempted to invoke " +$Item + "`r`n"
    UpdateReport($data)  
     
     
     
return
}

function Write-Host( ) {
    param(
        [Parameter(
			Mandatory = $False,
			ValueFromPipeline=$True)]
        [ string] $Text
    )
	
	 
    $data = "Script attempted to print on screen the following text:  " +$Text + "`r`n"
    UpdateReport($data)  
     
     
     
return
}

function Set-Alias( ) {
    param(
        [Parameter(
			Mandatory = $False,
			ValueFromPipeline=$True)]
        $a ,
		
		[Parameter(
			Mandatory = $False,
			ValueFromPipeline=$True)]
        $cmdlet
		
    )
	
	$ErrorActionPreference= 'silentlycontinue'
    $data = "Script attempted to assign the alias "+$a +" to the cmdlet "+$cmdlet+ "`r`n"	
    UpdateReport $data 
	$Alias = "New-Alias $($a) $($cmdlet) -scope global ;"
	$Alias > ([System.IO.Path]::GetTempPath() +"Alias.txt")
	
	try{
	New-Alias $a $cmdlet -scope global
	}
	catch{}
	
return
}